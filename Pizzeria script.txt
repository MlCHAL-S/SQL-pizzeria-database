-- Jest to projekt na studia, więc komentarze tym razem są po polsku.

DROP DATABASE IF EXISTS pizzeria;

-- Tworzenie bazy danych
CREATE DATABASE pizzeria;

-- Używanie bazy danych
USE pizzeria;

-- Tworzenie tabeli customer
CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    city VARCHAR(255),
    house_number INT,
    street VARCHAR(255),
    phone VARCHAR(15),
    session_id VARCHAR(255)
);

-- Wypełnienie tabeli customer danymi
INSERT INTO customer (first_name, last_name, city, house_number, street, phone, session_id)
VALUES
    ('John', 'Doe', 'New York', 123, 'Main Street', '555-1234', 'session123'),
    ('Jane', 'Smith', 'Los Angeles', 456, 'Oak Avenue', '555-5678', 'session456'),
    ('David', 'Johnson', 'Chicago', 789, 'Elm Street', '555-9012', 'session789'),
    ('Sarah', 'Williams', 'Miami', 321, 'Maple Avenue', '555-3456', 'session321'),
    ('Michael', 'Brown', 'San Francisco', 654, 'Cedar Road', '555-7890', 'session654'),
    ('Emily', 'Taylor', 'Seattle', 987, 'Pine Street', '555-2345', 'session987'),
    ('Daniel', 'Davis', 'Boston', 654, 'Spruce Lane', '555-6789', 'session654'),
    ('Olivia', 'Miller', 'Houston', 321, 'Birch Boulevard', '555-0123', 'session321'),
    ('Sophia', 'Anderson', 'Philadelphia', 789, 'Ash Street', '555-4567', 'session789'),
    ('Matthew', 'Thomas', 'Denver', 456, 'Chestnut Avenue', '555-8901', 'session456');

-- Tworzenie tabeli orders
CREATE TABLE orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    total_price DECIMAL(10,2),
    order_status VARCHAR(255),
    customer_id INT,
    delivery_date_time DATETIME,
    place_date_time DATETIME,
    employee_id INT,
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id)
);

-- Wypełnienie tabeli orders danymi
INSERT INTO orders (total_price, order_status, customer_id, delivery_date_time, place_date_time, employee_id)
VALUES
    (19.99, 'In Progress', 1, '2023-05-31 18:00:00', '2023-05-31 17:30:00', 1),
    (24.99, 'Delivered', 2, '2023-05-30 20:15:00', '2023-05-30 19:45:00', 2),
    (12.99, 'Completed', 3, '2023-05-29 19:30:00', '2023-05-29 19:00:00', 3),
    (16.99, 'In Progress', 4, '2023-05-28 21:45:00', '2023-05-28 21:15:00', 4),
    (21.99, 'In Progress', 5, '2023-05-27 22:30:00', '2023-05-27 22:00:00', 5),
    (15.99, 'Delivered', 6, '2023-05-26 19:15:00', '2023-05-26 18:45:00', 6),
    (13.99, 'Completed', 7, '2023-05-25 20:30:00', '2023-05-25 20:00:00', 7),
    (18.99, 'In Progress', 8, '2023-05-24 22:45:00', '2023-05-24 22:15:00', 8),
    (22.99, 'In Progress', 9, '2023-05-23 23:30:00', '2023-05-23 23:00:00', 9),
    (16.99, 'Delivered', 10, '2023-05-22 20:15:00', '2023-05-22 19:45:00', 10);

-- Tworzenie tabeli employee
CREATE TABLE employee (
    employee_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255)
);

-- Wypełnienie tabeli employee danymi
INSERT INTO employee (name)
VALUES
    ('John Smith'),
    ('Jane Johnson'),
    ('David Davis'),
    ('Sarah Williams'),
    ('Michael Brown'),
    ('Emily Taylor'),
    ('Daniel Davis'),
    ('Olivia Miller'),
    ('Sophia Anderson'),
    ('Matthew Thomas');

-- Tworzenie tabeli pizza
CREATE TABLE pizza (
    pizza_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    amount INT,
    session_id VARCHAR(255),
    price DECIMAL(10,2),
    finished BOOLEAN,
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

-- Wypełnienie tabeli pizza danymi
INSERT INTO pizza (order_id, amount, session_id, price, finished)
VALUES
    (1, 2, 'session123', 9.99, TRUE),
    (2, 1, 'session456', 12.99, TRUE),
    (3, 3, 'session789', 6.99, TRUE),
    (4, 2, 'session321', 8.99, FALSE),
    (5, 1, 'session654', 11.99, FALSE),
    (6, 2, 'session987', 7.99, FALSE),
    (7, 3, 'session654', 10.99, TRUE),
    (8, 1, 'session321', 13.99, TRUE),
    (9, 2, 'session789', 8.99, TRUE),
    (10, 1, 'session456', 11.99, TRUE);

-- Tworzenie tabeli ingredients
CREATE TABLE ingredients (
    ingredient_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255),
    price DECIMAL(10,2),
    employee_id INT,
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id)
);

-- Wypełnienie tabeli ingredients danymi
INSERT INTO ingredients (name, price, employee_id)
VALUES
    ('Tomato Sauce', 1.99, 1),
    ('Mozzarella Cheese', 2.99, 2),
    ('Pepperoni', 1.49, 3),
    ('Mushrooms', 0.99, 4),
    ('Green Peppers', 0.99, 5),
    ('Onions', 0.49, 6),
    ('Olives', 1.29, 7),
    ('Ham', 1.99, 8),
    ('Pineapple', 1.49, 9),
    ('Bacon', 2.49, 10);

-- Tworzenie tabeli pizza_ingredients
CREATE TABLE pizza_ingredients (
    pizza_ingredient_id INT PRIMARY KEY AUTO_INCREMENT,
    pizza_id INT,
    ingredient_id INT,
    session_id VARCHAR(255),
    finished BOOLEAN,
    FOREIGN KEY (pizza_id) REFERENCES pizza(pizza_id),
    FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id)
);

-- Wypełnienie tabeli pizza_ingredients danymi
INSERT INTO pizza_ingredients (pizza_id, ingredient_id, session_id, finished)
VALUES
    (1, 1, 'session123', TRUE),
    (1, 2, 'session123', TRUE),
    (2, 1, 'session456', TRUE),
    (3, 3, 'session789', TRUE),
    (3, 4, 'session789', TRUE),
    (3, 5, 'session789', TRUE),
    (4, 1, 'session321', FALSE),
    (4, 2, 'session321', FALSE),
    (4, 6, 'session321', FALSE),
    (5, 1, 'session654', FALSE);

-- Połączenie tabel customer z order
ALTER TABLE orders ADD CONSTRAINT fk_customer_id FOREIGN KEY (customer_id) REFERENCES customer(customer_id);

-- Połączenie tabel order z pizza
ALTER TABLE pizza ADD CONSTRAINT fk_order_id FOREIGN KEY (order_id) REFERENCES orders(order_id);

-- Połączenie tabel pizza_ingredients z ingredients
ALTER TABLE pizza_ingredients ADD CONSTRAINT fk_pizza_id FOREIGN KEY (pizza_id) REFERENCES pizza(pizza_id);
ALTER TABLE pizza_ingredients ADD CONSTRAINT fk_ingredient_id FOREIGN KEY (ingredient_id) REFERENCES ingredients(ingredient_id);

-- Połączenie tabel employee z orders
ALTER TABLE orders ADD CONSTRAINT fk_employee_id FOREIGN KEY (employee_id) REFERENCES employee(employee_id);

-- Połączenie tabel employee z ingredients
ALTER TABLE ingredients ADD CONSTRAINT fk_employee_id2 FOREIGN KEY (employee_id) REFERENCES employee(employee_id);


-- Indeksy

-- Ten indeks przyspieszy wyszukiwanie zamówień na podstawie identyfikatora klienta.
CREATE INDEX idx_orders_customer_id ON orders (customer_id);

-- Ten indeks przyspieszy wyszukiwanie zamówień na podstawie ich statusu.
CREATE INDEX idx_orders_order_status ON orders (order_status);

-- Ten indeks przyspieszy wyszukiwanie składników na podstawie ich nazwy.
CREATE INDEX idx_ingredients_name ON ingredients (name);


-- Procedury

-- Procedura do dodawania nowego zamówienia
DELIMITER //
CREATE PROCEDURE add_order (
    IN total_price DECIMAL(10,2),
    IN order_status VARCHAR(255),
    IN customer_id INT,
    IN delivery_date_time DATETIME,
    IN place_date_time DATETIME,
    IN employee_id INT
)
BEGIN
    INSERT INTO orders (total_price, order_status, customer_id, delivery_date_time, place_date_time, employee_id)
    VALUES (total_price, order_status, customer_id, delivery_date_time, place_date_time, employee_id);
END //
DELIMITER ;


-- Procedura do pobierania zamówień danego klienta
DELIMITER //
CREATE PROCEDURE get_customer_orders (
    IN customer_id INT
)
BEGIN
    SELECT * FROM orders WHERE customer_id = customer_id;
END //
DELIMITER ;


-- Wyzwalacze

-- Ten wyzwalacz sprawdzi, czy cena zamówienia jest większa od zera. Jeśli cena jest mniejsza lub równa zero, wyzwalacz zgłosi błąd.
DELIMITER //
CREATE TRIGGER validate_order_total_price
BEFORE INSERT ON orders
FOR EACH ROW
BEGIN
    IF NEW.total_price <= 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid order total price.';
    END IF;
END //
DELIMITER ;


-- Ten wyzwalacz sprawdzi, czy numer telefonu klienta ma co najmniej 9 cyfr. Jeśli liczba cyfr jest mniejsza niż 9, wyzwalacz zgłosi błąd.
DELIMITER //
CREATE TRIGGER validate_customer_phone
BEFORE INSERT ON customer
FOR EACH ROW
BEGIN
    IF LENGTH(NEW.phone) < 9 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid customer phone number.';
    END IF;
END //
DELIMITER ;


-- Zapytania z joinami

-- WHERE
SELECT c.first_name, 
	c.last_name, 
    o.total_price
FROM 
	customer c, 
    orders o, 
    pizza p
WHERE 
	c.customer_id = o.customer_id
  AND o.order_id = p.order_id
  AND p.finished = TRUE;
  
-- NATURAL JOIN
SELECT 
	o.order_id, 
    o.total_price, 
    p.amount
FROM 
	orders o
	NATURAL JOIN pizza p
	NATURAL JOIN pizza_ingredients pi
WHERE 
	pi.finished = TRUE;
	
-- Inner join
SELECT 
	o.order_id, 
    o.total_price, 
    e.name
FROM 
	orders o
	INNER JOIN employee e ON o.employee_id = e.employee_id
	INNER JOIN ingredients i ON o.order_id = i.employee_id;
	
	
-- LEFT OUTER JOIN
SELECT 
	c.first_name, 
    c.last_name, 
    o.order_id
FROM 
	customer c
	LEFT OUTER JOIN orders o ON c.customer_id = o.customer_id
	LEFT OUTER JOIN pizza p ON o.order_id = p.order_id;
	
-- RIGHT OUTER JOIN
SELECT 
	e.name, 
    i.name, 
    i.price
FROM 
	employee e
	RIGHT OUTER JOIN ingredients i ON e.employee_id = i.employee_id
	RIGHT OUTER JOIN pizza_ingredients pi ON i.ingredient_id = pi.ingredient_id;
	
-- Te drugie klauzule

-- GROUP BY
SELECT 
	customer_id, 
	COUNT(*) AS order_count
FROM 
	orders
GROUP BY 
	customer_id;


-- HAVING
SELECT 
	customer_id, 
    	COUNT(*) AS order_count
FROM 
	orders
GROUP BY 
	customer_id
HAVING 
	order_count >= 5;
	

-- BETWEEN
SELECT *
FROM 
	orders
WHERE 
	delivery_date_time BETWEEN '2023-01-01' AND '2023-01-31';


-- Zamiast LIKE użyłem REGEX, bo wygodniejsze :)
SELECT *
FROM 
	customer
WHERE 
	first_name REGEXP '^J';
	

-- ORDER BY
SELECT *
FROM 
	pizza
ORDER BY 
	price DESC;
	
	
-- SUM
SELECT 
	customer_id, 
    SUM(total_price) AS total_spent
FROM 
	orders
GROUP BY 
	customer_id;


-- COUNT
SELECT 
	employee_id, 
    	COUNT(*) AS order_count
FROM 
	orders
GROUP BY 
	employee_id
HAVING 
	order_count > 10;